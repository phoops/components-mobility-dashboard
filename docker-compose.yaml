version: '3'

services:
  ###
  # Main components
  ###
  # quantumleap:
  #   image: orchestracities/quantumleap:${QL_VERSION:-latest}
  #   ports:
  #     - "8668:8668"
  #   depends_on:
  #     - scorpio
  #     - crate
  #     - redis
  #   environment:
  #     - CRATE_HOST=${CRATE_HOST:-crate}
  #     - USE_GEOCODING=True
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - LOGLEVEL=DEBUG

  # scorpio:
  #   image: scorpiobroker/scorpio:scorpio-aaio-no-eureka_latest
  #   ports:
  #     - "9090:9090"
  #   depends_on:
  #     - postgres
  #     - kafka

  # ###
  # # QuantumLeap deps
  # ###
  # # Need to run this in order to start crate in docker
  # # sysctl -w vm.max_map_count=262144
  # crate:
  #   image: crate:${CRATE_VERSION:-4.6.7}
  #   command: crate -Cauth.host_based.enabled=false
  #     -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
  #   environment:
  #     - LOG4J_FORMAT_MSG_NO_LOOKUPS=true
  #   ports:
  #     # Admin UI
  #     - "4200:4200"
  #     # Transport protocol
  #     - "4300:4300"
  #   volumes:
  #     - cratedata:/data

  # redis:
  #   image: redis:${REDIS_VERSION:-6.2.3}
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redisdata:/data

  # ###
  # # Scorpio Context Broker Deps
  # ###
  # zookeeper:
  #   image: zookeeper
  #   ports:
  #     - "2181"
  #   logging:
  #     driver: none
  # kafka:
  #   image: bitnami/kafka
  #   ports:
  #     - "9092"
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: kafka
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_PORT: 9092
  #     KAFKA_LOG_RETENTION_MS: 10000
  #     KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
  #     ALLOW_PLAINTEXT_LISTENER: "yes"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - zookeeper
  #   logging:
  #     driver: none
  # postgres:
  #   image: postgis/postgis
  #   ports:
  #     - "5432"
  #   environment:
  #     POSTGRES_USER: ngb
  #     POSTGRES_PASSWORD: ngb
  #     POSTGRES_DB: ngb
  #   logging:
  #     driver: none
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data

  # ###
  # # smartcity-dashboard
  # ###
  # ql-service:
  #   build:
  #     context: .
  #     dockerfile: ./backend/qlService/Dockerfile
  #   environment:
  #     DB_HOST: mongo
  #     DB_PORT: "27017"
  #     DB_USER: root
  #     DB_PASS: supersecret
  #     DB_NAME: test
  frontend-service:
    build:
      context: .
      dockerfile: ./backend/frontendService/Dockerfile
    ports:
      - 8080:8080

  frontend-app:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    ports:
      - 3000:3000

  ###
  # smartcity-dashboard dependencies
  ###

  mongo:
    image: mongo:4.4
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

volumes:
  cratedata:
  redisdata:
  pgdata: